{
  "clis/apews_cli/apews-userdocumentation.html": {
    "href": "clis/apews_cli/apews-userdocumentation.html",
    "title": "Ape Workspace Command Line Interface",
    "keywords": "Ape Workspace Command Line Interface Benutzerdokumentation 1. Was ist die Ape Workspace CLI? Das Ape Workspace Command Line Interface (CLI) ist ein Tool zum Erstellen der grundlegenden Projektstruktur für ein WebLine Mobile 2 AddIn. Die Ape Workspace CLI wird über die PowerShell installiert, aufgerufen und ausgeführt. 2. Wie installiere ich die Ape Workspace CLI? Die Ape Workspace CLI ist ein benutzerdefiniertes .NET Tool und benötigt deshalb die .NET CLI, um als Tool installiert werden zu können. Die .NET CLI ist Teil des .NET SDK und ist somit im Regelfall auf den Rechnern der Entwickler bereits installiert. Zur Kontrolle, ob die .NET CLI installiert ist, reicht folgender Aufruf über die PowerShell : dotnet Ist die .NET CLI installiert, werden als Output Bedienhinweise für das dotnet Kommando angezeigt. Fehlt die .NET CLI, folgt als Output ein Fehler. Weitere Informationen zur Installation der .NET CLI finden sich in der Microsoft Dokumentation . Installation des Tools Die Installation der Ape Workspace CLI erfolgt über das dotnet tool Kommando unter Angabe des Pfades des NuGet-Feeds, in dem sich das NuGet-Package der Ape Workspace CLI befindet, und dem Namen des zu installierenden Tools. #Befehl zur Installation der Ape Workspace CLI als .NET Tool $nugetFeed = \"\\\\intern.intend.de\\corp\\NuGetRepo\\Channels\\Intend.Ape\"; dotnet tool install -g ape.workspace.cli --add-source $nugetFeed; #HINWEIS: #Feed kann direkt als Zeichenkette der Option --add-source als Parameter übergeben werden. #Verwendung einer Variablen wegen Fehlern durch Zeilenumbruch beim Kopieren. Installierte Tools anzeigen Zum Anzeigen der installierten .NET Tools dient folgender Befehl: dotnet tool list -g Installiertes Tool updaten Sollte es eine neue Version der Ape Workspace CLI geben, kann wie folgt ein Update durchgeführt werden: $nugetFeed = \"\\\\intern.intend.de\\corp\\NuGetRepo\\Channels\\Intend.Ape\"; dotnet tool update -g ape.workspace.cli --add-source $nugetFeed; #HINWEIS: #Feed kann direkt als Zeichenkette der Option --add-source als Parameter übergeben werden. #Verwendung einer Variablen wegen Fehlern durch Zeilenumbruch beim Kopieren. 3. Wie verwende ich die Ape Workspace CLI? Da die Ape Workspace CLI als globales Tool auf dem Rechner installiert wurde, reicht das Aufrufen über den Befehl apews aus. Die Ape Workspace CLI benötigt zur Erstellung der WLM2-AddIn-Projektstruktur zwingend den Projektnamen als Parameter. Alle weiteren Parameter sind optional. apews-Kommando Die Projektstruktur wird in dem Ordner erstellt, der zum Zeitpunkt des Aufrufs das current working directory ist. Das apews -Kommando muss also aus dem Zielordner heraus aufgerufen werden. Die Erstellung einer Projektstruktur für ein WLM2-AddIn erfolgt wie folgt: #Beispiele zur Verwendung des Befehls \"apews\" #Aufruf erfolgt aus dem Verzeichnis, in dem das AddIn erstellt werden soll apews -n [Projektname] #einfacher Aufruf: kein Präfix, Templates werden installiert apews -n [Projektname] -p [Projektpraefix] -t [true | false] #vollständiger Aufruf Liste der verfügbaren Parameter Kürzel Langname Funktion erforderlich? -n --project-name Core-Name der AddIn-Solution und der Projekte. Beispiel: \"RLP.EIF\" Solutionname: \"[Präfix].RLP.EIF\" Projektnamen: \"RLP.EIF.[Business|Service|UI]\" ja -p --prefix Präfix der AddIn-Solution, welches nicht für die Projektnamen verwendet wird. Beispiel: \"Intend.Wlm2.Addin\" Solutionname: \"Intend.Wlm2.Addin.[Core-Name]\" Projektnamen: \"[Core-Name].[Business|Service|UI]\" nein -t --templates Argumente: true oder false Bestimmt, ob die WLM2-AddIn Templates vor Erstellen der Projektstruktur installiert werden sollen oder nicht. Sofern nicht angegeben, werden die Templates installiert. nein 4. Was leistet die Ape Workspace CLI? Die Ape Workspace CLI übernimmt folgende Aufgaben zur Erstellung einer Projektstruktur für ein WLM2-AddIn: das Installieren der dotnet-Templates für den Workspace & die Projekte, falls nicht anders angegeben Anlegen des Ape Workspace inklusive Ordnerstruktur, Create-Release-Skripten usw. Anlegen der AddIn-Solution innerhalb des Workspaces Anlegen eines Basis Business-, Service- und -UI-Projekts innerhalb des Workspaces, inklusive Service_Module- und UI-Module-Klassen mit Codebeispielen zur Registierung der UnityContainer Hinzufügen der Projekte zur AddIn-Solution Wiederherstellen der NuGet-Referenzen 5. Wie sieht der Output für ein WLM2-AddIn aus? Das Anlegen eines WLM2 AddIns über die Ape Workspace CLI erzeugt folgenden Output: C:\\USERS\\REBECCAV\\DESKTOP\\TESTORDNER │ ApeWorkspace.json │ Intend.Wlm2.Addin.Beispiel.sln │ NuGet.Config │ ├───Config │ └───ApeVs │ __file$Version__.props │ ├───Docs │ .gitkeep │ ├───Source │ ├───src │ │ │ .gitkeep │ │ │ │ │ ├───Beispiel.Business │ │ │ │ Beispiel.Business.csproj │ │ │ │ │ │ │ ├───obj │ │ │ │ Beispiel.Business.csproj.nuget.cache │ │ │ │ Beispiel.Business.csproj.nuget.g.props │ │ │ │ Beispiel.Business.csproj.nuget.g.targets │ │ │ │ project.assets.json │ │ │ │ │ │ │ └───Properties │ │ │ AssemblyInfo.cs │ │ │ │ │ ├───Beispiel.Service │ │ │ │ Beispiel.Service.csproj │ │ │ │ Service_Module.cs │ │ │ │ │ │ │ ├───obj │ │ │ │ Beispiel.Service.csproj.nuget.cache │ │ │ │ Beispiel.Service.csproj.nuget.g.props │ │ │ │ Beispiel.Service.csproj.nuget.g.targets │ │ │ │ project.assets.json │ │ │ │ │ │ │ └───Properties │ │ │ AssemblyInfo.cs │ │ │ │ │ ├───Beispiel.UI │ │ │ │ Beispiel.UI.csproj │ │ │ │ UI_Module.cs │ │ │ │ │ │ │ ├───obj │ │ │ │ Beispiel.UI.csproj.nuget.cache │ │ │ │ Beispiel.UI.csproj.nuget.g.props │ │ │ │ Beispiel.UI.csproj.nuget.g.targets │ │ │ │ project.assets.json │ │ │ │ │ │ │ └───Properties │ │ │ AssemblyInfo.cs │ │ │ │ │ └───_Bundle │ │ │ _Bundle.csproj │ │ │ │ │ ├───obj │ │ │ project.assets.json │ │ │ _Bundle.csproj.nuget.cache │ │ │ _Bundle.csproj.nuget.g.props │ │ │ _Bundle.csproj.nuget.g.targets │ │ │ │ │ └───Properties │ │ AssemblyInfo.cs │ │ │ └───test │ .gitkeep │ └───Task ├───Build │ ├───MsBuild │ │ Build.ps1 │ │ Clean.ps1 │ │ │ └───NuGet │ pack.ps1 │ ├───Cleanup │ └───Workspace │ .gitkeep │ ├───Common │ Initialize-TaskSystem.ps1 │ nuget.exe │ NuGet.ps1 │ TaskSystem.psm1 │ VisualStudio.ps1 │ Workspace.ps1 │ ├───Publish │ └───NuGet │ push.ps1 │ └───Trigger Clear-Workspace.ps1 Create-CI-Release.ps1 Create-Release.ps1"
  },
  "clis/apews_cli/overview.html": {
    "href": "clis/apews_cli/overview.html",
    "title": "Overview",
    "keywords": "Overview"
  },
  "clis/npm_cli/custom_npm_package.html": {
    "href": "clis/npm_cli/custom_npm_package.html",
    "title": "Custom npm Package",
    "keywords": "Custom npm Package Creating a Custom npm Package From the project's root folder, execute: npm init --yes Change the package.json to the following: { \"name\": \"YourPackageName\", \"version\": \"1.0.0\", \"description\": \"An example npm package that does nothing\", \"main\": \"index.js\", \"author\": \"Some Body\" } Making Your Project an npm Package Important : The js file used as main file must contain module.exports = the functions to export . From the project's root folder, where the package.json should be, pack it to a tarball: npm pack [YourPackageName] Et voila , you have created your own npm package! Consume an npm Package Install the custom package as a tarball file: npm install [local/or/network/path/to/package.tgz | url/to/package.tgz] Deinstallation npm uninstall [YourPackageName]"
  },
  "clis/team_foundation_cli/tf-cheatsheet.html": {
    "href": "clis/team_foundation_cli/tf-cheatsheet.html",
    "title": "Working with the MS Team Foundation Tool",
    "keywords": "Working with the MS Team Foundation Tool Cheat Sheet Find Location of TF.exe $tfPath = ((Get-ChildItem -Path \"C:\\\" -Filter \"tf.exe\" -force -recurse)[0]).fullname Alternatively, add the tf.exe to %PATH%. The commands then have to be invoked with tf at the beginning. Show all Workspaces on Machine Regardless of current working directory, lists all server and local workspaces on the machine. tf vc workspaces Show Current Workfold and Mapping Shows the TF workspace associated to the current working directory (if any) and the associated server mapping. tf vc workfold Create New Local Workspace on Machine Creates the new TFS workspace in the current working directory. tf vc workspace /new:\"Workspace-Name\" /location:local /collection:http://tfs:8080/tfs/INTEND /noprompt For server workspace, use /location:server (but seriously, we don't do that). Edit Workspace Edits the TFS workspace that is associated with the current working directory (if any). #prompts you with options you can edit regarding the workspace tf vc workspace Alternatively, directly provide the option to edit, like new workspace name, new user, change collection a. s. o. Delete Workspace Deletes a workspace and undoes all pending changes. tf vc workspace /delete \"Workspace-Name\" Map Local Folder To Server Folder Maps the local folder of a TFS workspace to a server folder. tf vc workfold /noprompt /workspace:Workspace-Name \"$/Server/Path\" \"local\\Path\" If not mapped to a specific server folder, the workspace will alwys be mapped to the root path \"$/\" . Get Items From Server Gets the items matching the specified pattern from the server to the current working directory. Re-creates the server path structure. Different items can be provided by seperating them with a whitespace . tf vc get \"*.file\" \"some-folder\" \"hello*\" /noprompt /recursive Get all Files from Folder in Latest Version Gets all files in latest version from specified folder. tf vc get .\\SomeFolder /noprompt /recursive Add New Items to Pending Changes Adds items or folders (recursively) to a server folder, also adding them to pending changes. tf vc add some-file /noprompt /recurse CAUTION as the adding will be relatively to the local as well as mapped server path. Check For Pending Changes Checks for pending changes in specified location. tf vc stat * /recursive Check-In Pending Changes Checks in all pending changes relatively from current working directory. tf vc checkin /comment:\"some comment\" /noprompt Get Change History Gets the change history for specified location (recursively) or relatively from current working directory. tf vc hist * /noprompt /recursive This is only a cheatsheet for the most likely cases. The whole documentation can be found here ."
  },
  "docker/docker_cheatsheet.html": {
    "href": "docker/docker_cheatsheet.html",
    "title": "🐋docker",
    "keywords": "🐋 docker new format: docker [management command] [subcommand] (options) version : gets installed version of docker, can be used as check if docker is running info : detailed information container start/stop/remove run --publish 80:80 nginx : starts docker container based on image called \"nginx\" on port 80:80 ( important : always provide image last) -d|--detach : run container in background --name [name] : specifies name of container -e|--env : pass environment variable to container (e.g. MYSQL_RANDOM_ROOT_PASSWORD=yes ) --rm : automatically removes container when it exits stop [container id/name] : stop container ls : lists all running containers -a : lists all containers start [container id/name] : starts a stopped container logs [container id/name] : gets logs for specified container rm [container id/name] : removes container(s) -f : force to remove running container What's happening inside a container? top [container id/name] : lists processes running insinde of specified container stats (container id/name) : shows live stream of container resource usage statistics; if no container id/name is provided, it shows stats for all running containers inspect [container id/name] : displays metadata about the container and how it was initialized, returns JSON exec -it [container id/name][COMMAND] : interactively executing COMMAND on existing container run -it [container id/name] : start container interactively with pseudo-TTY terminal ( -i -t ) leave with exit (stops container) start -ai [container id/name] : start stopped container interactively Docker Networking port [container id/name] : get used ports of specified container run -p|--publish [HOST:CONTAINER] : expose ports when running container inspect [container id/name] --format \"{{.NetworkSettings.IPAddress}}\" : inspect IP Address of container run --network [network id/name] : run new container on specified network network ls : list existing networks inspect [network id/name] : shows details about specified network create [name] : creates new network connect [network id/name] [container id/name] : connect existing container to specified network disconnect [network id/name] [container id/name] : disconnect container from network Important Notes apt-get update && apt-get install -y procps : install procps for ps aux usage, since it is no longer part of mysql image Alpine Linux : very small Linux distribution focused on security; no bash pre-installed Avoid static IP addresses default bridge network has no default DNS, so create custom networks"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Note Page",
    "keywords": "Welcome to the Note Page Dies ist eine Sammlung von Snippets und Notizen rund um verschiedene technikbezogene Themen."
  },
  "shells/Linux/General.html": {
    "href": "shells/Linux/General.html",
    "title": "Linux Distribution abfragen",
    "keywords": "Linux Distribution abfragen cat /etc/*-release"
  },
  "shells/Powershell/paths/paths.html": {
    "href": "shells/Powershell/paths/paths.html",
    "title": "PowerShell Commands that are related to paths",
    "keywords": "PowerShell Commands that are related to paths List paths and pathlengths get-childitem -recurse | select @{Name=\"path\";Expression={$_.fullname}},@{Name=\"pathlength\";Expression={$_.fullname.length}}| sort pathlength | format-list"
  },
  "shells/terminal/open_terminal.html": {
    "href": "shells/terminal/open_terminal.html",
    "title": "open terminal from terminal with current folder",
    "keywords": "open terminal from terminal with current folder open -a terminal ./"
  },
  "shells/terminal/settings.html": {
    "href": "shells/terminal/settings.html",
    "title": "open terminal with default settings",
    "keywords": "open terminal with default settings The profile has to be selected as standard in the profile settings. The settings for new window and new tab have to be set to standard . https://stackoverflow.com/a/19800654"
  }
}